{
  "id": "qualys-security-blog-2025-10-30-f9c0f166",
  "source_id": "qualys-security-blog",
  "guid": "https://blog.qualys.com/?p=38901",
  "title": "What Security Teams Need to Know as PHP and IoT Exploits Surge",
  "url": "https://blog.qualys.com/category/vulnerabilities-threat-research",
  "published_at": "2025-10-30T12:35:07+00:00",
  "fetched_at": "2025-10-30T12:42:28.981691Z",
  "status": "processed",
  "content": {
    "raw": "Attack automation is accelerating, widening the window between detection and response. Qualys TRU telemetry reveals how these attacks unfold and what defenders can do next. The Qualys Threat Research Unit (TRU) has identified a sharp increase in attacks targeting PHP servers, IoT devices, and cloud gateways, primarily driven by botnets such as Mirai, Gafgyt, and Mozi. These automated campaigns exploit known CVE vulnerabilities and cloud misconfigurations to gain control over exposed systems and expand botnet networks. With PHP powering more than 73% of websites and 82% of enterprises reporting incidents linked to cloud misconfigurations, the modern attack surface has never been broader. This blog explores the latest exploitation trends, highlights vulnerabilities and misconfigurations actively under attack, and outlines actionable steps security teams can take to strengthen defenses and minimize exposure. PHP Servers are the Top Target for Vulnerabilities and Misconfigurations PHP remains a foundational component for websites and web applications, especially within popular content management systems (CMS) like WordPress. However, this ubiquity also creates a large and attractive attack surface. Many PHP deployments suffer from:&nbsp; Outdated versions and plugins&nbsp; Misconfigured file permissions&nbsp; Debugging components left enabled in production&nbsp; Insecure file storage&nbsp;&nbsp; These gaps allow threat actors to launch remote code execution (RCE) attacks, exfiltrate data, or turn the server into a launchpad for malware. Left unaddressed, even a single misconfigured or outdated PHP instance can become the entry point for a large-scale compromise. For example, earlier this year hundreds of websites were compromised due to a zero-day vulnerability in the PHP-based Craft CMS.&nbsp;&nbsp; PHP Exploitation Trends and Noteworthy CVEs&nbsp;&nbsp; Attackers are constantly scanning for weaknesses in popular PHP frameworks and development tools. Here are a few examples of how critical vulnerabilities and insecure configurations continue to provide entry points for RCE and data compromise.&nbsp; CVE-2022-47945: Remote Code Execution in ThinkPHP Framework&nbsp;&nbsp; CVE-2022-47945 is a critical RCE vulnerability in ThinkPHP versions before 6.0.14, affecting applications with multi-language support enabled (lang_switch_on = true). The flaw lies in improper input sanitization of the lang parameter, which attackers exploit to perform Local File Inclusion (LFI) of sensitive internal scripts, such as: /vendor/pear/pearcmd.php /usr/local/lib/php/pearcmd Figure 1: CVE-2022-47945 Exploitation command in the network traffic Remote Debugging using XDEBUG in PHPStorm&nbsp;&nbsp; Qualys researchers have observed exploitation attempts where attackers use the ?XDEBUG_SESSION_START=phpstorm query string to initiate a remote debugging session with the XDebug plugin in combination with an integrated development environment (IDE), typically PHPStorm. If XDebug is unintentionally left active in production environments, attackers may use these sessions to gain insight into application behavior or extract sensitive data.&nbsp;&nbsp; Figure 2: HTTP request where the attacker is trying to initiate a remote debugging session CVE-2021-3129: Remote Code Execution (RCE) Vulnerability in Laravel&nbsp;&nbsp; CVE-2021-3129 is an RCE vulnerability that affects Laravel applications when the Ignition debugging package is exposed in production environments. Laravel Ignition exposes the route /_ignition/execute-solution in debug mode, which is used by developers to execute helper commands for fixing errors. If this feature is left enabled in production, it can be exploited by attackers to execute arbitrary code.&nbsp;&nbsp; The following is one of the snippets from a network packet where attackers are trying to exploit CVE-2021-3129. Malicious command is base64 encoded in the subsequent HTTP request packet.&nbsp; Figure 3: HTTP request where the attacker is trying to exploit CVE-2021-3129 CVE-2017-9841: PHPUnit RCE&nbsp;&nbsp; This long-standing vulnerability resides in PHPUnit, a widely used testing framework in PHP applications. The flaw stems from the presence of the vulnerable “eval-stdin.php” script in older PHPUnit versions, allowing unauthenticated attackers to execute arbitrary PHP code remotely. This vulnerability is often exploited in misconfigured production environments where development tools are unintentionally exposed to the internet.&nbsp; HTTP Request URLs often seen in scanning include:&nbsp;/api/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/app/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/apps/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/backup/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/blog/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/cms/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/crm/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/demo/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/laravel/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/lib/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/lib/phpunit/phpunit/Util/PHP/eval-stdin.php&nbsp;/lib/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/panel/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/public/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/test/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/testing/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/tests/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/V2/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/vendor/phpunit/phpunit/LICENSE/eval-stdin.php&nbsp;/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/vendor/phpunit/phpunit/Util/PHP/eval-stdin.php&nbsp;/vendor/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/workspace/drupal/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/ws/ec/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/ws/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/www/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/yii/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp;/zend/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php&nbsp; The Dangers of Exposed Secrets and Credentials&nbsp;&nbsp; Insecurely stored secrets like credentials, API keys, and access tokens exposed to the internet are one of the most common and dangerous misconfigurations found on servers. Whether left behind during the transition from development to production or accidentally persisted in a deployment, secrets in plaintext files can lead to full compromise of cloud infrastructure. Attackers actively look for these plaintext files during initial recon andpost-exploitation.&nbsp; The Qualys TRU has identified ongoing attempts by attackers to access sensitive Amazon Web Services (AWS) credential files on exposed or misconfigured Linux servers. Frequently targeted file paths include:/.aws/credentials&nbsp;/aws/credentials&nbsp;/home/ec2-user/.aws/credentials&nbsp;/credentials&nbsp;/.aws/ecs-task-credentials&nbsp;/.aws/ecs-task-credentials.json&nbsp;/.aws/metadata/iam/security-credentials/&nbsp;/.aws_creds.json&nbsp;/.db_credentials&nbsp;/.smtp-credentials&nbsp;/.well-known/credentials.json&nbsp;/admin/config?cmd=cat+/root/.aws/credentials&nbsp;/api/aws/credentials&nbsp;/api/v1/aws/credentials&nbsp;/api/v1/credentials&nbsp;/aws/credentials.json&nbsp;/aws/ecs/task-credentials&nbsp;/aws/ecs/task-credentials.json&nbsp;/aws/iam/credentials.json&nbsp;/aws/iam/ecs-task-credentials.json&nbsp;/aws/iam/temp-creds.json&nbsp;/aws/iam/temporary-credentials&nbsp;/aws/metadata/iam/security-credentials&nbsp;/aws/metadata/iam/security-credentials/&nbsp;/aws/s3/credentials.bak&nbsp;/aws/s3/credentials.json&nbsp;/aws/s3/credentials.yml&nbsp;/aws_credentials.txt&nbsp;/aws_creds.js&nbsp;/data/aws/credentials&nbsp;/ecs/task-credentials&nbsp;/ecs/task-credentials.json&nbsp;/email/credentials.json&nbsp;/hidden/.aws/credentials&nbsp;/internal-api/aws/credentials&nbsp;/internal-api/iam/credentials&nbsp;/internal/aws/credentials&nbsp;/k8s/eks/credentials&nbsp;/latest/meta-data/iam/security-credentials/&nbsp;/pms?module=logging&amp;file_name=../../../../../../~/.aws/credentials&amp;number_of_lines=10000&nbsp;/private/aws_credentials.json&nbsp;/public/.aws/credentials&nbsp;/s3-credentials.bak&nbsp;/s3-credentials.json&nbsp;/s3/.aws/credentials&nbsp;/s3/public/credentials&nbsp;/tmp/.aws/credentials&nbsp;/vendor/.aws/credentials&nbsp;/vendor/aws/credentials&nbsp; IOT Devices Remain a Weak Link in Security&nbsp;&nbsp; Threat actors also continue to leverage insecure or legacy IoT devices. These systems often use outdated firmware, insecure protocols, and hardcoded credentials, creating a perfect storm for exploitation.&nbsp;&nbsp; CVE-2024-3721: TBK DVR Command Injection&nbsp; CVE-2024-3721 is a critical command injection vulnerability, stemming from insecure firmware logic, that affects TBK DVR-4104 and DVR-4216 devices and is actively exploited by Mirai-like botnets. The issue stems from unsanitized [mdb/mdc] parameters in HTTP requests, allowing unauthenticated command injection.&nbsp; Here is a snippet from an exploitation attempt by an attacker:&nbsp;&nbsp; Figure 4: CVE-2024-3721 Exploitation command in network traffic Successful exploitation leads to the download and execution of the malicious script selftbk.sh file. This shell script acts as a dropper, downloading and executing a variant of the Mirai botnet malware, tailored for the target&#8217;s CPU architecture (e.g., ARM7). Once executed, the infected DVR becomes part of a botnet, capable of launching DDoS attacks, scanning for other vulnerable devices, and persisting within IoT infrastructure. MVPower DVR Shell Unauthenticated Command Execution&nbsp; Another recurring target is the MVPower TV-7104HE DVR, which contains a built-in backdoor that allows unauthenticated users to execute arbitrary system commands via an HTTP GET request. Though more of a misconfiguration than a vulnerability, we have observed it is actively targeted by Mirai variants. Following is a snippet from apacket capture where the Mirai Botnet is trying to execute a command on the remote system by exploiting this vulnerability.&nbsp;&nbsp; Figure 5: MVPower DVR Shell Unauthenticated Command Execution by MIRAI Botnet Cloud Vulnerabilities: CVE-2022-22947&nbsp;&nbsp; Cloud-native environments are also being targeted through exposed APIs and misconfigured services, with attackers quick to weaponize known flaws. One example is CVE-2022-22947, a critical RCE vulnerability in the Spring Cloud Gateway that allows unauthenticated attackers to execute arbitrary code via a maliciously crafted request to the /actuator/refresh endpoint.&nbsp;&nbsp; Figure 6: Malicious HTTP request during Exploitation of CVE-2022-22947&nbsp; Threat Actors Exploit Cloud Resources for Reconnaissance&nbsp;&nbsp; Upon analyzing the source IPs involved in recent scanning activity, it was observed that a significant number of scans originated from cloud infrastructure providers. These include prominent services such as AWS, Google Cloud Platform (GCP), Microsoft Azure, Digital Ocean, and Akamai Cloud, among others.&nbsp;&nbsp; This pattern aligns with how threat actors often abuse cloud resources, using cheap, temporary, or compromised computer instances to conduct reconnaissance and exploit attempts while masking their real origin. Large portions of this scanning activity appear to be tied to active vulnerability exploitation, such as attempts targeting PHP, ThinkPHP, DVR devices, Laravel, Spring Cloud Gateway servers, SSH brute-force attacks, misconfigurations, and secrets exposure.&nbsp; According to the Qualys TRU research, the top autonomous system number (ASN) organizations by total number of scanning source IPs are:&nbsp; ASN Organization&nbsp;Number of IP Addresses&nbsp;GOOGLE-CLOUD-PLATFORM&nbsp;2373&nbsp;MICROSOFT-CORP-MSN-AS-BLOCK&nbsp;1725&nbsp;Akamai Connected Cloud&nbsp;1575&nbsp;DIGITALOCEAN-ASN&nbsp;1403&nbsp;HURRICANE&nbsp;943&nbsp;CHINA UNICOM China169 Backbone&nbsp;934&nbsp;Chinanet&nbsp;848&nbsp;AMAZON-02&nbsp;666&nbsp;Alibaba US Technology Co., Ltd.&nbsp;589&nbsp;ONYPHE SAS&nbsp;550&nbsp;UCLOUD INFORMATION TECHNOLOGY HK LIMITED&nbsp;538&nbsp;CENSYS-ARIN-01&nbsp;451&nbsp;Korea Telecom&nbsp;394&nbsp;AMAZON-AES&nbsp;387&nbsp;TOT Public Company Limited&nbsp;344&nbsp;Driftnet Ltd&nbsp;322&nbsp;CHEAPY-HOST&nbsp;189&nbsp; This illustrates how easily attackers can operationalize scanning at scale, obscuring their origin by rapidly spinning up short-lived virtual machines (VMs) across providers like AWS and GCP before abandoning them and repeating the cycle. This tactic makes attribution difficult, as the traffic appears to come from trusted cloud infrastructure.&nbsp;&nbsp; 5 Best Practices to Reduce Exploitation Risk&nbsp;&nbsp; Reducing the risks highlighted above requires a layered defense strategy that enhances visibility, limits exposure, and prioritizes remediation in the most critical areas of your environment. Here are a few best practices that can help security teams stay ahead of these evolving threats:&nbsp; Ensure timely updates and patching: Regularly update all software dependencies, libraries, and frameworks. Monitor vendor advisory channels for new CVEs. For containerized environments, always rebuild images with the latest base and application versions.&nbsp; Remove development and debug tools in production: Many of the exploited vulnerabilities exist because dev-debug components are deployed in production. Always make sure that these components are disabled in production.&nbsp; Protect sensitive files and secrets: Do not store secrets in plaintext files; instead, use a managed store like AWS Secrets Manager or HashiCorp Vault. It’s also important to regularly audit servers and containers for hardcoded secrets.&nbsp;&nbsp; Harden network exposure: Allow only necessary IPs to access your cloud infrastructure. Restrict public access to debug ports, IoT device shells, and internal file paths. Secure cloud access and controls: Use security groups to tightly restrict port and IP access. Monitor cloud access logs for IAM misuse or secret scanning attempts.&nbsp; Building Resilience with Integrated Security&nbsp;&nbsp; Today’s threat actors don’t need to be highly sophisticated to be effective. With widely available exploit kits, botnet frameworks, and scanning tools, even entry-level attackers can cause significant damage.&nbsp;&nbsp;&nbsp; By combining visibility, automation, and risk-based prioritization, the Qualys platform empowers organizations to:&nbsp; Maintain visibility into internet-facing assets (e.g., PHP servers and IoT devices)&nbsp;&nbsp; Detect and remediate misconfigurations in real time&nbsp;&nbsp; Eliminate known vulnerabilities before attackers weaponize them&nbsp;&nbsp; Protect cloud and on-premises infrastructure with continuous assessment&nbsp; See what’s next in threat intelligence. Stay informed with new findings from the Qualys Threat Research. Get Insights",
    "full": "",
    "processed": ""
  },
  "analysis": {
    "score": 85,
    "relevance_score": 90,
    "threat_category": "Botnet Attacks",
    "summary": "The article discusses a surge in automated attacks targeting PHP servers, IoT devices, and cloud gateways, primarily driven by botnets like Mirai, Gafgyt, and Mozi.",
    "key_entities": [
      "Mirai",
      "Gafgyt",
      "Mozi",
      "PHP"
    ],
    "ttps": [
      "Exploiting Known CVEs",
      "Cloud Misconfigurations"
    ]
  },
  "content_source": "rss",
  "content_fetch_method": null,
  "processing_metadata": {
    "processed_at": "2025-10-30T12:43:30.443179+00:00Z",
    "llm_provider": "unknown",
    "processing_method": "json_processing"
  },
  "updated_at": "2025-10-30T12:43:30.443360Z"
}
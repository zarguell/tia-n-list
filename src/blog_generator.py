"""Blog generation module for Tia N. List project.

This module creates a daily summary blog post in Markdown format
for Hugo static site generation.
"""

import datetime
from pathlib import Path
from src import persona


def generate_daily_summary() -> bool:
    """Generate a daily summary blog post from top articles.

    Returns:
        True if successful, False otherwise.
    """
    print("Generating daily summary blog post...")

    try:
        # Get top articles for summary
        articles = persona.get_top_articles_for_summary(limit=10)

        if not articles:
            print("No articles found for summary")
            return False

        # Generate joke of the day
        joke = persona.fetch_joke_of_the_day()

        # Create blog content
        blog_content = f"""---
title: "Daily Threat Intelligence Summary - {datetime.datetime.now().strftime('%Y-%m-%d')}"
date: {datetime.datetime.now().strftime('%Y-%m-%d')}
tags: [threat-intelligence, cybersecurity, daily-summary]
author: "Tia N. List"
---

# Daily Threat Intelligence Summary

Good morning, cyber defenders! Here's your daily threat intelligence briefing with the most critical developments from our automated feeds.

## 🔴 Top Priority Alerts

"""
        # Add top articles with Tia's commentary
        for i, article in enumerate(articles[:5], 1):
            # Determine relevance emoji based on score
            relevance_emoji = "🔴" if article['score'] < 30 else "🟡" if article['score'] < 70 else "🟢" if article['score'] < 90 else "🟢"

            # Add Tia's personal note based on relevance
            personal_note = ""
            if article['score'] >= 80:
                personal_note = "\n\n*Tia's take: This is critical intelligence that organizations should act on immediately.*"
            elif article['score'] >= 60:
                personal_note = "\n\n*Tia's note: Interesting development worth monitoring for defensive measures.*"

            blog_content += f"""### {i}. {article['title']}

**Source:** {article['source']}

**Relevance:** {relevance_emoji} ({article['score']}/100)

{article.get('summary', 'No summary available')[:200]}...{personal_note}

[Read more analysis]({article['url']})

---

"""

        # Add joke section
        if joke:
            blog_content += f"""
## 📝 Today's Cybersecurity Wisdom

{joke}

---

"""
        else:
            blog_content += """
## 📝 Today's Cybersecurity Wisdom

*Why did the cybersecurity researcher cross the road? Because he was looking for vulnerabilities!*

---

"""

        # Add footer
        blog_content += f"""
## Additional Context

This automated summary is generated from {len(articles)} articles processed through our AI-powered analysis pipeline. Each article is evaluated for relevance and scored accordingly. The top {len(articles)} most critical items are highlighted above.

For complete details on all indicators and tactics, visit our [full analysis dashboard](/analysis).

**Methodology:** Articles are automatically fetched from RSS/Atom feeds, filtered for relevance using AI, and analyzed for technical indicators using advanced threat intelligence techniques.

*Stay vigilant, stay informed.*

---

*Generated by Tia N. List - Your AI-powered Threat Intelligence Analyst*
"""

        # Ensure hugo/content/posts directory exists
        posts_dir = Path("hugo/content/posts")
        posts_dir.mkdir(parents=True, exist_ok=True)

        # Create filename with date
        filename = f"{datetime.datetime.now().strftime('%Y-%m-%d')}-daily-summary.md"
        filepath = posts_dir / filename

        # Write blog post
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(blog_content)

        print(f"✅ Blog post generated: {filename}")
        print(f"📁 Content length: {len(blog_content)} characters")

        return True

    except Exception as e:
        print(f"✗ Error generating blog post: {e}")
        return False


def generate_deep_dive_article(title: str, content: str, analysis: str) -> bool:
    """Generate a deep-dive article for manual publishing.

    Args:
        title: Article title.
        content: Article content.
        analysis: Detailed analysis or commentary.

    Returns:
        True if successful, False otherwise.
    """
    try:
        # Create deep-dive content with Tia's persona
        blog_content = f"""---
title: "{title}"
date: {datetime.datetime.now().strftime('%Y-%m-%d')}
tags: [deep-dive, analysis, threat-intelligence]
author: "Tia N. List"
---

# {title}

{content}

## 🧠 Deep Analysis

{analysis}

## 🔬 Key Indicators

*This section will be populated with extracted IOCs when processed through the main pipeline.*

---

## 📋 TTPs & Methodology

*Technical tactics and procedures identified in this analysis.*

---

## 💡 Strategic Implications

*Organizational impact and recommended defensive measures.*

---

*Generated by Tia N. List - Your AI-powered Threat Intelligence Analyst*

"""

        # Ensure hugo/content/posts directory exists
        posts_dir = Path("hugo/content/posts")
        posts_dir.mkdir(parents=True, exist_ok=True)

        # Create filename with title
        safe_title = "".join(c if c.isalnum() else '_' for c in title.lower() if not c.isspace())[:50]
        filename = f"{datetime.datetime.now().strftime('%Y-%m-%d')}-deep-dive-{safe_title}.md"

        # Write blog post
        with open(posts_dir / filename, 'w', encoding='utf-8') as f:
            f.write(blog_content)

        print(f"✅ Deep-dive article generated: {filename}")
        return True

    except Exception as e:
        print(f"✗ Error generating deep-dive article: {e}")
        return False


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "deep-dive":
        if len(sys.argv) >= 3:
            title = sys.argv[2]
            content = sys.argv[3] if len(sys.argv) >= 4 else "# Content placeholder"
            analysis = sys.argv[4] if len(sys.argv) >= 5 else "# Analysis placeholder"
            generate_deep_dive_article(title, content, analysis)
    else:
        generate_daily_summary()